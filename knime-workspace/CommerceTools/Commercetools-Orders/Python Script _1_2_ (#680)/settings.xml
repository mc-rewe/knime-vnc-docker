<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="&quot;&quot;&quot;%%000102019-04-24 MC: Process Commerce-Tools JSON Orders Data%%00010FROM Json to Pandas-Tables to .CSV%%00010&quot;&quot;&quot;%%00010import pandas as pd%%00010import numpy as np%%00010import datetime%%00010import os%%00010import requests%%00010%%00010import logging%%00010from math import ceil%%00010%%00010CURR_TIMESTAMP = str(datetime.datetime.utcnow())%%00010CURR_DATE = str(datetime.datetime.utcnow().date())%%00010%%00010# Logger setup%%00010log = logging.getLogger()%%00010log.addHandler(logging.StreamHandler())%%00010log.setLevel(logging.INFO)%%00010%%00010# create file handler to temp file%%00010LOGFILE = flow_variables[&quot;LOGFILE&quot;]%%00010fh = logging.FileHandler(LOGFILE)%%00010fh.setLevel(logging.DEBUG)%%00010log.addHandler(fh)%%00010%%00010CLIENT_ID = &quot;ZGIDetWrcCaGMASWwX8gg2Av&quot;%%00010CLIENT_SECRET = &quot;EsU3IW8ML8IdtKdrf46FONwl8LX8fvqa&quot;%%00010%%00010LAST_DB_ENTRY = flow_variables.get(&quot;last_entry&quot;)%%00010%%00010PROJECT_KEY = &quot;penny-live-1&quot;%%00010URL = &quot;https://auth.sphere.io/oauth/token&quot;%%00010HEADERS = {&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;}%%00010RESPONSE_LIMIT = 500  # 500 is standard API Limit%%00010RESPONSE_OFFSET = RESPONSE_LIMIT%%00010%%00010%%00010PROXY = flow_variables.get(&quot;PROXY&quot;)%%00010PROXIES = None%%00010if PROXY is not None and PROXY != &quot;None&quot;:%%00010    PROXIES = {&quot;https&quot;: f&quot;{PROXY}&quot;}%%00010%%00010url = &quot;https://api.sphere.io/{}/orders&quot;.format(PROJECT_KEY)%%00010params = {}%%00010params[&quot;offset&quot;] = 0%%00010params[&quot;limit&quot;] = RESPONSE_LIMIT%%00010%%00010%%00010def login(client_id, client_secret):%%00010    body = &quot;grant_type=client_credentials&amp;scope=view_orders:{}&quot;.format(PROJECT_KEY)%%00010    auth = (client_id, client_secret)%%00010    try:%%00010    %%00009r = requests.post(URL, data=body, headers=HEADERS, auth=auth, proxies=PROXIES)%%00010    except:%%00010    %%00009log.exception(f&quot;{r.text}&quot;)%%00010    else:%%00010    %%00009if r.status_code == 200:%%00010        %%00009return r.json()%%00010    %%00009else:%%00010        %%00009log.exception(f&quot;{r.text}&quot;)%%00010        %%00009raise Exception(&quot;Failed to get an access token. Waddup?&quot;)%%00010        %%00009%%00010%%00010auth = login(CLIENT_ID, CLIENT_SECRET)%%00010HEADERS[&quot;Authorization&quot;] = &quot;Bearer {}&quot;.format(auth.get(&quot;access_token&quot;))%%00010%%00010%%00010# TODO: Get this from SQL fur automatization%%00010# last_entry = &quot;2019-05-15 12:00:00&quot;%%00010# date_last = datetime.datetime.strptime(last_entry, &quot;%Y-%m-%d %H:%M:%S&quot;).isoformat()%%00010%%00010date_last = LAST_DB_ENTRY  #'2019-08-01' #LAST_DB_ENTRY%%00010%%00010params[&quot;where&quot;] = 'lastModifiedAt &gt;= &quot;{0}&quot;'.format(date_last)%%00010%%00010# Get first batch of result to see TOTAL%%00010results = []%%00010try:%%00010%%00009r = requests.get(url, headers=HEADERS, params=params, proxies=PROXIES)%%00010except:%%00010%%00009log.exception(f&quot;{r.text}&quot;)%%00010else:%%00010%%00009results.append(r.json())%%00010%%00009print(&quot;Total results: {}&quot;.format(results[0].get(&quot;total&quot;)))%%00010%%00010# Get rest of results: Loop until we have all results%%00010num_queries = ceil(results[0].get(&quot;total&quot;) / results[0].get(&quot;limit&quot;))%%00010for i in range(num_queries):%%00010    print(&quot;\r Query {} out of {}&quot;.format(i + 1, num_queries), end=&quot;&quot;)%%00010    params[&quot;offset&quot;] = (i + 1) * RESPONSE_OFFSET%%00010    try:%%00010    %%00009r = requests.get(url, headers=HEADERS, params=params, proxies=PROXIES)%%00010    except:%%00010    %%00009log.exception(f&quot;{r.text}&quot;)%%00010    else:%%00010    %%00009results.append(r.json())%%00010%%00010################################################%%00010# PART 2 -&gt; JSON To Orders%%00010################################################%%00010data = results%%00010%%00010TIMESTAMP_COLS = [&quot;createdAt&quot;, &quot;completedAt&quot;, &quot;loadTimestamp&quot;]%%00010ORDER_KOPF_VARS_KEY = [%%00010    &quot;orderNumber&quot;,%%00010    &quot;customerId&quot;,%%00010    &quot;customerEmail&quot;,%%00010    &quot;totalPrice&quot;,%%00010    &quot;createdAt&quot;,%%00010    &quot;completedAt&quot;,%%00010    &quot;shipmentState&quot;,%%00010    &quot;paymentState&quot;,%%00010    &quot;shippingInfo_Price_centAmount&quot;,%%00010    &quot;discountCodes&quot;,%%00010    &quot;custom_fields_VoucherCode&quot;,%%00010    &quot;custom_fields_VoucherId&quot;,%%00010    &quot;custom_fields_PaybackExtraPoints&quot;,%%00010    &quot;custom_fields_VoucherValue_centAmount&quot;,%%00010    &quot;custom_fields_PaybackBasicPoints&quot;,%%00010    &quot;custom_fields_PaybackCardNumber&quot;,%%00010    &quot;custom_fields_CustomerNumber&quot;,%%00010    &quot;loadTimestamp&quot;,%%00010]%%00010%%00010# Process JSON to RDS Table%%00010order_list = []%%00010%%00010for result in data:%%00010    for order in result.get(&quot;results&quot;):%%00010        orderNumber = order.get(&quot;orderNumber&quot;)%%00010        customerId = order.get(&quot;customerId&quot;)%%00010        customerEmail = order.get(&quot;customerEmail&quot;)%%00010        totalPrice = order.get(&quot;totalPrice&quot;).get(&quot;centAmount&quot;)%%00010        createdAt = order.get(&quot;createdAt&quot;)%%00010        completedAt = order.get(&quot;completedAt&quot;)%%00010        shipmentState = order.get(&quot;shipmentState&quot;)%%00010        paymentState = order.get(&quot;paymentState&quot;)%%00010        shippingInfo_Price_centAmount = (%%00010            order.get(&quot;shippingInfo&quot;, {}).get(&quot;price&quot;, {}).get(&quot;centAmount&quot;)%%00010        )%%00010        # lineItems_totalPrice_centAmount = order.get('lineItems').get('totalPrice').get('centAmount')%%00010        if order.get(&quot;discountCodes&quot;):%%00010            discountCodes = order.get(&quot;discountCodes&quot;)%%00010        else:%%00010            discountCodes = None%%00010        custom_fields_VoucherCode = order.get(&quot;custom&quot;).get(&quot;fields&quot;).get(&quot;VoucherCode&quot;)%%00010        custom_fields_VoucherId = order.get(&quot;custom&quot;).get(&quot;fields&quot;).get(&quot;VoucherId&quot;)%%00010        custom_fields_PaybackExtraPoints = (%%00010            order.get(&quot;custom&quot;).get(&quot;fields&quot;).get(&quot;PaybackExtraPoints&quot;)%%00010        )%%00010        custom_fields_VoucherValue_centAmount = (%%00010            order.get(&quot;custom&quot;).get(&quot;fields&quot;).get(&quot;VoucherValue&quot;, {}).get(&quot;centAmount&quot;)%%00010        )%%00010        custom_fields_PaybackBasicPoints = (%%00010            order.get(&quot;custom&quot;).get(&quot;fields&quot;).get(&quot;PaybackBasicPoints&quot;)%%00010        )%%00010        custom_fields_PaybackCardNumber = (%%00010            order.get(&quot;custom&quot;).get(&quot;fields&quot;).get(&quot;PaybackCardNumber&quot;)%%00010        )%%00010        custom_fields_CustomerNumber = (%%00010            order.get(&quot;custom&quot;).get(&quot;fields&quot;).get(&quot;CustomerNumber&quot;)%%00010        )%%00010        #%%00010        loadTimestamp = CURR_TIMESTAMP%%00010        VARS_VALUES = [%%00010            orderNumber,%%00010            customerId,%%00010            customerEmail,%%00010            totalPrice,%%00010            createdAt,%%00010            completedAt,%%00010            shipmentState,%%00010            paymentState,%%00010            shippingInfo_Price_centAmount,%%00010            discountCodes,%%00010            custom_fields_VoucherCode,%%00010            custom_fields_VoucherId,%%00010            custom_fields_PaybackExtraPoints,%%00010            custom_fields_VoucherValue_centAmount,%%00010            custom_fields_PaybackBasicPoints,%%00010            custom_fields_PaybackCardNumber,%%00010            custom_fields_CustomerNumber,%%00010            loadTimestamp,%%00010        ]%%00010        order_list.append(VARS_VALUES)%%00010%%00010# To Table%%00010df = pd.DataFrame(order_list)%%00010df.columns = ORDER_KOPF_VARS_KEY%%00010%%00010# To Datetime, without microseconds and TimeZone%%00010df[TIMESTAMP_COLS] = df[TIMESTAMP_COLS].apply(lambda x: pd.to_datetime(x))%%00010df[TIMESTAMP_COLS] = df[TIMESTAMP_COLS].apply(lambda x: x.dt.tz_localize(None))%%00010# Keep Seconds only%%00010df[TIMESTAMP_COLS] = df[TIMESTAMP_COLS].astype(&quot;datetime64[s]&quot;)%%00010# Convert to String%%00010df[TIMESTAMP_COLS] = df[TIMESTAMP_COLS].astype(str)%%00010%%00010# NANS to NONE for SQL%%00010df = df.where(pd.notnull(df), None)%%00010%%00010# To Knime Ouput%%00010output_table_1 = df%%00010%%00010%%00010################################################%%00010# PART 3 -&gt; JSON To Order-Items%%00010################################################%%00010%%00010TIMESTAMP_COLS = [&quot;loadTimestamp&quot;]%%00010ITEMS_VARS_KEY = [%%00010    &quot;orderNumber&quot;,%%00010    &quot;customerId&quot;,%%00010    &quot;customerNumber&quot;,%%00010    &quot;discount_orderline_centAmount&quot;,%%00010    &quot;discount_single_item_centAmount&quot;,%%00010    &quot;undiscounted_price_orderline_centAmount&quot;,%%00010    &quot;undiscounted_price_single_item_centAmount&quot;,%%00010    &quot;DiscountPerItem&quot;,%%00010    &quot;UndiscountedPricePerItem&quot;,%%00010    &quot;discountedPricePerQuantity&quot;,%%00010    &quot;name&quot;,%%00010    &quot;price&quot;,%%00010    &quot;productId&quot;,%%00010    &quot;productKey&quot;,%%00010    &quot;quantity&quot;,%%00010    &quot;totalPrice&quot;,%%00010    &quot;loadTimestamp&quot;,%%00010]%%00010%%00010## V_BON_KOPF Nachbildung%%00010items_list = []%%00010%%00010for result in data:%%00010    for order in result.get(&quot;results&quot;):%%00010        for item in order.get(&quot;lineItems&quot;):%%00010            id = order.get(&quot;id&quot;)%%00010            orderNumber = order.get(&quot;orderNumber&quot;)%%00010            customerId = order.get(&quot;customerId&quot;)%%00010            customerNumber = order.get(&quot;custom&quot;).get(&quot;fields&quot;).get(&quot;CustomerNumber&quot;)%%00010            #%%00010            try:%%00010                UndiscountedPricePerItem = (%%00010                    item.get(&quot;custom&quot;)%%00010                    .get(&quot;fields&quot;)%%00010                    .get(&quot;UndiscountedPricePerItem&quot;, {})%%00010                    .get(&quot;centAmount&quot;)%%00010                )%%00010                undiscounted_price_orderline_centAmount = (%%00010                    item.get(&quot;custom&quot;)%%00010                    .get(&quot;fields&quot;)%%00010                    .get(&quot;undiscounted_price_orderline&quot;, {})%%00010                    .get(&quot;centAmount&quot;)%%00010                )%%00010                undiscounted_price_single_item_centAmount = (%%00010                    item.get(&quot;custom&quot;)%%00010                    .get(&quot;fields&quot;)%%00010                    .get(&quot;undiscounted_price_single_item&quot;, {})%%00010                    .get(&quot;centAmount&quot;)%%00010                )%%00010%%00010                discountedPricePerQuantity = (%%00010                    item.get(&quot;custom&quot;).get(&quot;fields&quot;).get(&quot;discountedPricePerQuantity&quot;)%%00010                )%%00010                discount_orderline_centAmount = (%%00010                    item.get(&quot;custom&quot;)%%00010                    .get(&quot;fields&quot;)%%00010                    .get(&quot;discount_orderline&quot;, {})%%00010                    .get(&quot;centAmount&quot;)%%00010                )%%00010                discount_single_item_centAmount = (%%00010                    item.get(&quot;custom&quot;)%%00010                    .get(&quot;fields&quot;)%%00010                    .get(&quot;discount_single_item&quot;, {})%%00010                    .get(&quot;centAmount&quot;)%%00010                )%%00010%%00010                DiscountPerItem = (%%00010                    item.get(&quot;custom&quot;)%%00010                    .get(&quot;fields&quot;)%%00010                    .get(&quot;DiscountPerItem&quot;, {})%%00010                    .get(&quot;centAmount&quot;)%%00010                )%%00010%%00010            except Exception as e:%%00010                discount_orderline_centAmount = None%%00010                discount_single_item_centAmount = None%%00010                undiscounted_price_orderline_centAmount = None%%00010                undiscounted_price_single_item_centAmount = None%%00010                DiscountPerItem = None%%00010                UndiscountedPricePerItem = None%%00010                discountedPricePerQuantity = None%%00010%%00010            name = item.get(&quot;name&quot;).get(&quot;de&quot;)%%00010            price = item.get(&quot;price&quot;).get(&quot;value&quot;).get(&quot;centAmount&quot;)%%00010            productId = item.get(&quot;productId&quot;)%%00010            productKey = item.get(&quot;variant&quot;).get(&quot;key&quot;)%%00010            quantity = item.get(&quot;quantity&quot;)%%00010            totalPrice = item.get(&quot;totalPrice&quot;).get(&quot;centAmount&quot;)%%00010            #%%00010            loadTimestamp = CURR_TIMESTAMP%%00010%%00010            VARS_VALUES = [%%00010                orderNumber,%%00010                customerId,%%00010                customerNumber,%%00010                discount_orderline_centAmount,%%00010                discount_single_item_centAmount,%%00010                undiscounted_price_orderline_centAmount,%%00010                undiscounted_price_single_item_centAmount,%%00010                DiscountPerItem,%%00010                UndiscountedPricePerItem,%%00010                discountedPricePerQuantity,%%00010                name,%%00010                price,%%00010                productId,%%00010                productKey,%%00010                quantity,%%00010                totalPrice,%%00010                loadTimestamp,%%00010            ]%%00010            items_list.append(VARS_VALUES)%%00010%%00010%%00010# To Table%%00010df = pd.DataFrame(items_list)%%00010df.columns = ITEMS_VARS_KEY%%00010%%00010# To Datetime, without microseconds and TimeZone%%00010df[TIMESTAMP_COLS] = df[TIMESTAMP_COLS].apply(lambda x: pd.to_datetime(x))%%00010df[TIMESTAMP_COLS] = df[TIMESTAMP_COLS].apply(lambda x: x.dt.tz_localize(None))%%00010# Keep Seconds only%%00010df[TIMESTAMP_COLS] = df[TIMESTAMP_COLS].astype(&quot;datetime64[s]&quot;)%%00010# Convert to String%%00010df[TIMESTAMP_COLS] = df[TIMESTAMP_COLS].astype(str)%%00010%%00010# NANS to NONE for SQL%%00010df = df.where(pd.notnull(df), None)%%00010%%00010# To Knime Ouput%%00010output_table_2 = df%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="python3"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script1in2out.Python2Script1In2OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒2)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="4.1.3.v202005112253"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="4.1.3.v202005112253"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒2)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 100500, Cols: 18"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
<config key="port_2">
<entry key="index" type="xint" value="2"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 132556, Cols: 17"/>
<entry key="port_dir_location" type="xstring" value="port_2"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="41c526f9-4f97-4339-be2b-aee2d59daa91"/>
</config>
</config>
